I" <p>In C# 8.0  you can define an implementation when you declare a member of an interface. This feature provides new capabilities where you can define default implementations for features declared in interfaces. Classes can pick when to override functionality, when to use the default functionality, and when not to declare support for discrete features.</p>

<p>Create interfaces with implementations that describe discrete features.
Create classes that use the default implementations.
Create classes that override some or all of the default implementations.</p>

<h4 id="limitations-of-extension-methods">Limitations of extension methods</h4>

<p>One way you can implement behavior that appears as part of an interface is to define extension methods that provide the default behavior. Interfaces declare a minimum set of members while providing a greater surface area for any class that implements that interface. For example, the extension methods in Enumerable provide the implementation for any sequence to be the source of a LINQ query.</p>

<p>Extension methods are resolved at compile time, using the declared type of the variable. Classes that implement the interface can provide a better implementation for any extension method. Variable declarations must match the implementing type to enable the compiler to choose that implementation. When the compile-time type matches the interface, method calls resolve to the extension method. Another concern with extension methods is that those methods are accessible wherever the class containing the extension methods is accessible. Classes cannot declare if they should or should not provide features declared in extension methods.</p>

<p>Starting with C# 8.0, you can declare the default implementations as interface methods. Then, every class automatically uses the default implementation. Any class that can provide a better implementation can override the interface method definition with a better algorithm.</p>

<div class="language-c# highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
27
28
29
30
31
32
33
34
35
36
37
</pre></td><td class="rouge-code"><pre><span class="k">interface</span> <span class="nc">that</span> <span class="n">defines</span> <span class="n">the</span> <span class="n">behavior</span> <span class="k">for</span> <span class="n">all</span> <span class="n">lights</span>
<span class="k">public</span> <span class="k">interface</span> <span class="nc">ILight</span>
<span class="p">{</span>
    <span class="k">void</span> <span class="nf">SwitchOn</span><span class="p">();</span>
    <span class="k">void</span> <span class="nf">SwitchOff</span><span class="p">();</span>
    <span class="kt">bool</span> <span class="nf">IsOn</span><span class="p">();</span>
<span class="p">}</span>
<span class="n">A</span> <span class="n">basic</span> <span class="n">overhead</span> <span class="n">light</span> <span class="n">fixture</span> <span class="n">might</span> <span class="n">implement</span> <span class="k">this</span> <span class="k">interface</span> <span class="nc">as</span> <span class="n">shown</span> <span class="k">in</span> <span class="n">the</span> <span class="n">following</span> <span class="n">code</span><span class="p">:</span>

<span class="k">public</span> <span class="k">class</span> <span class="nc">OverheadLight</span> <span class="p">:</span> <span class="n">ILight</span>
<span class="p">{</span>
    <span class="k">private</span> <span class="kt">bool</span> <span class="n">isOn</span><span class="p">;</span>
    <span class="k">public</span> <span class="kt">bool</span> <span class="nf">IsOn</span><span class="p">()</span> <span class="p">=&gt;</span> <span class="n">isOn</span><span class="p">;</span>
    <span class="k">public</span> <span class="k">void</span> <span class="nf">SwitchOff</span><span class="p">()</span> <span class="p">=&gt;</span> <span class="n">isOn</span> <span class="p">=</span> <span class="k">false</span><span class="p">;</span>
    <span class="k">public</span> <span class="k">void</span> <span class="nf">SwitchOn</span><span class="p">()</span> <span class="p">=&gt;</span> <span class="n">isOn</span> <span class="p">=</span> <span class="k">true</span><span class="p">;</span>

    <span class="k">public</span> <span class="k">override</span> <span class="kt">string</span> <span class="nf">ToString</span><span class="p">()</span> <span class="p">=&gt;</span> <span class="s">$"The light is </span><span class="p">{(</span><span class="n">isOn</span> <span class="p">?</span> <span class="s">"on"</span> <span class="p">:</span> <span class="s">"off"</span><span class="p">)}</span><span class="s">"</span><span class="p">;</span>
<span class="p">}</span>
<span class="n">Next</span><span class="p">,</span> <span class="k">let</span><span class="err">'</span><span class="n">s</span> <span class="n">define</span> <span class="n">the</span> <span class="k">interface</span> <span class="nc">for</span> <span class="n">a</span> <span class="n">light</span> <span class="n">that</span> <span class="n">can</span> <span class="n">automatically</span> <span class="n">turn</span> <span class="n">off</span> <span class="n">after</span> <span class="n">a</span> <span class="n">timeout</span><span class="p">:</span>
 <span class="m">10</span><span class="n">T011public</span> <span class="k">interface</span> <span class="nc">ITimerLight</span> <span class="p">:</span> <span class="n">ILight</span>
<span class="p">{</span>
    <span class="n">Task</span> <span class="nf">TurnOnFor</span><span class="p">(</span><span class="kt">int</span> <span class="n">duration</span><span class="p">);</span>
<span class="p">}</span>  

<span class="n">You</span> <span class="n">could</span> <span class="k">add</span> <span class="n">a</span> <span class="n">basic</span> <span class="n">implementation</span> <span class="n">to</span> <span class="n">the</span> <span class="n">overhead</span> <span class="n">light</span><span class="p">,</span> <span class="n">but</span> <span class="n">a</span> <span class="n">better</span> <span class="n">solution</span> <span class="k">is</span> <span class="n">to</span> <span class="n">modify</span> <span class="k">this</span> <span class="k">interface</span> <span class="nc">definition</span> <span class="n">to</span> <span class="n">provide</span> <span class="n">a</span> <span class="k">virtual</span> <span class="k">default</span> <span class="n">implementation</span><span class="p">:</span>
  
  <span class="k">public</span> <span class="k">interface</span> <span class="nc">ITimerLight</span> <span class="p">:</span> <span class="n">ILight</span>
<span class="p">{</span>
    <span class="k">public</span> <span class="k">async</span> <span class="n">Task</span> <span class="nf">TurnOnFor</span><span class="p">(</span><span class="kt">int</span> <span class="n">duration</span><span class="p">)</span>
    <span class="p">{</span>
        <span class="n">Console</span><span class="p">.</span><span class="nf">WriteLine</span><span class="p">(</span><span class="s">"Using the default interface method for the ITimerLight.TurnOnFor."</span><span class="p">);</span>
        <span class="nf">SwitchOn</span><span class="p">();</span>
        <span class="k">await</span> <span class="n">Task</span><span class="p">.</span><span class="nf">Delay</span><span class="p">(</span><span class="n">duration</span><span class="p">);</span>
        <span class="nf">SwitchOff</span><span class="p">();</span>
        <span class="n">Console</span><span class="p">.</span><span class="nf">WriteLine</span><span class="p">(</span><span class="s">"Completed ITimerLight.TurnOnFor sequence."</span><span class="p">);</span>
    <span class="p">}</span>
<span class="p">}</span>
</pre></td></tr></tbody></table></code></pre></div></div>

<p>Reference tutorials:
  <a href="https://docs.microsoft.com/en-us/dotnet/csharp/whats-new/tutorials/mixins-with-default-interface-methods" title="default-interface-methods">default-interface-methods</a></p>

:ET